'use client';

import React, { useState, useEffect, useRef } from 'react';
import { Button, Space, Card, Typography, Spin, Alert } from 'antd';
import { CommentOutlined, UserOutlined } from '@ant-design/icons';
import { useAuth } from '../../../hooks/auth';
import { useChat } from '../../../hooks/useChat';
import { useUsers } from '../../../hooks/useUsers';
import ChatModal from '../../../components/ChatModal';
import { getTransactionDetails } from '../../../api/transaction';

const { Text } = Typography;

interface ChatPlaceholderProps {
  transactionId: number;
}

export default function ChatPlaceholder({ transactionId }: ChatPlaceholderProps) {
  const { user, isAuthenticated } = useAuth();
  const { connected } = useChat();
  const { getUserName, getUserAvatar, preloadUsers } = useUsers();
  const [chatModalVisible, setChatModalVisible] = useState(false);
  const [transactionDetails, setTransactionDetails] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const loadedUsersRef = useRef<boolean>(false);

  useEffect(() => {
    const fetchTransactionDetails = async () => {
      try {
        setLoading(true);
        const details = await getTransactionDetails(transactionId);
        setTransactionDetails(details);
        
        // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        if (details && !loadedUsersRef.current) {
          const userIds = [];
          
          if (details.transaction?.seller_id) userIds.push(details.transaction.seller_id);
          if (details.transaction?.buyer_id) userIds.push(details.transaction.buyer_id);
          if (details.seller?.id) userIds.push(details.seller.id);
          if (details.buyer?.id) userIds.push(details.buyer.id);
          
          // –ï—Å–ª–∏ –µ—Å—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö –¥–∞–Ω–Ω—ã–µ
          if (userIds.length > 0) {
            console.log('–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ ChatPlaceholder:', userIds);
            preloadUsers(userIds)
              .then(() => { loadedUsersRef.current = true; })
              .catch(err => console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err));
          }
        }
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', err);
        setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
      } finally {
        setLoading(false);
      }
    };

    if (transactionId) {
      fetchTransactionDetails();
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      loadedUsersRef.current = false;
    };
  }, [transactionId, preloadUsers]);

  const openChat = () => {
    setChatModalVisible(true);
  };

  const closeChat = () => {
    setChatModalVisible(false);
  };

  if (!isAuthenticated) {
    return (
      <Alert
        message="–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
        description="–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É"
        type="warning"
        showIcon
      />
    );
  }

  if (loading) {
    return (
      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '200px' }}>
        <Spin size="large" tip="–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ..." />
      </div>
    );
  }

  if (error) {
    return (
      <Alert
        message="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏"
        description={error}
        type="error"
        showIcon
      />
    );
  }

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —á–∞—Ç–∞ –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const { transaction, sale, seller, buyer } = transactionDetails || {};
  const listingId = transaction?.listing_id || sale?.listing_id;
  const sellerId = transaction?.seller_id || sale?.seller_id;
  const buyerId = transaction?.buyer_id || sale?.buyer_id;

  // –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const sellerName = seller?.username || getUserName(sellerId);
  const buyerName = buyer?.username || getUserName(buyerId);

  if (!listingId || !sellerId || !buyerId) {
    return (
      <Alert
        message="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"
        description="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"
        type="warning"
        showIcon
      />
    );
  }

  return (
    <div style={{ padding: '16px' }}>
      <Card 
        title={
          <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
            <CommentOutlined />
            <span>–ß–∞—Ç –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</span>
          </div>
        }
        style={{ textAlign: 'center' }}
      >
        <div style={{ marginBottom: '16px' }}>
          <Text type="secondary">
            –û–±—â–µ–Ω–∏–µ –º–µ–∂–¥—É –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º –∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–º –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é #{listingId}
          </Text>
        </div>
        
        <div style={{ marginBottom: '16px' }}>
          <Space direction="vertical" size="small">
            <div>
              <UserOutlined /> <Text strong>–ü—Ä–æ–¥–∞–≤–µ—Ü:</Text> {sellerName}
            </div>
            <div>
              <UserOutlined /> <Text strong>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</Text> {buyerName}
            </div>
          </Space>
        </div>

        <div style={{ marginBottom: '16px' }}>
          <Text type="secondary" style={{ fontSize: '12px' }}>
            –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {connected ? 'üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω' : 'üî¥ –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}
          </Text>
        </div>
        
        <Button 
          type="primary" 
          icon={<CommentOutlined />}
          onClick={openChat}
          size="large"
          disabled={!connected}
        >
          –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç
        </Button>
        
        {!connected && (
          <div style={{ marginTop: '8px' }}>
            <Text type="secondary" style={{ fontSize: '12px' }}>
              –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É —á–∞—Ç–æ–≤...
            </Text>
          </div>
        )}
      </Card>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —á–∞—Ç–∞ */}
      <ChatModal
        visible={chatModalVisible}
        onClose={closeChat}
        transactionId={transactionId}
        sellerId={sellerId}
        buyerId={buyerId}
        title={`–ß–∞—Ç –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ #${transactionId}`}
      />
    </div>
  );
} 