## 16. Заключение

Данное техническое задание описывает требования к разработке платформы P2P-торговли внутриигровыми ценностями "GameTrade". Проект реализует безопасную систему обмена виртуальными предметами между игроками с защитой от мошенничества через Escrow, систему споров и модерацию.

Особое внимание уделено высокой производительности, масштабируемости и надежности системы, включая компоненты аналитики для мониторинга бизнес-показателей.

Ключевыми особенностями платформы являются:
1. Гибкая система категоризации, адаптируемая под любую игру
2. Динамические атрибуты предметов и услуг
3. Безопасная система сделок с Escrow-механизмом
4. Мультивалютная поддержка
5. Микросервисная архитектура для горизонтального масштабирования
6. Современный интерфейс с высоким UX

Документ включает примеры кода и интеграций, которые помогут разработчикам быстрее понять архитектуру и приступить к реализации.

Разработка будет вестись согласно плану с четкими этапами и приоритетами, с особым фокусом на безопасность и user experience.

Проект будет использовать современный технологический стек с четкой файловой структурой, что обеспечит эффективную разработку, поддержку и масштабирование системы.# Техническое задание - Биржа внутриигровых ценностей

**Версия**: 1.2  
**Дата**: 12 мая 2025 г.  
**Статус**: Готов к реализации

## 1. Введение

### 1.1 Обзор продукта

Платформа "GameTrade" представляет собой P2P-маркетплейс для безопасного обмена внутриигровыми ценностями (предметами, аккаунтами) между игроками. Ключевой особенностью платформы является система Escrow, которая гарантирует безопасность сделок и предотвращает мошенничество.

### 1.2 Глоссарий

| Термин | Описание |
|--------|----------|
| Escrow | Механизм заморозки средств до подтверждения передачи предмета |
| Listing | Объявление о продаже конкретного предмета/аккаунта |
| Marketplace‑service | Бизнес‑логика публикации лотов и сделок |
| ItemTemplate | Статический справочник предметов конкретной игры |
| Dispute | Спор между продавцом и покупателем |

### 1.3 Цели проекта

1. Предоставить безопасную P2P-площадку для торговли внутриигровыми ценностями
2. Минимизировать мошенничество через Escrow, антифрод и модерацию
3. Обеспечить высокую производительность (P95 latency < 200 мс при 1000 RPS)
4. Гарантировать доступность (SLA 99.9%)

## 2. Системная архитектура

### 2.1 Высокоуровневая архитектура

```
┌ Browser (React‑SPA) ┐
│   Next.js 14 SSR   │
└───────▲────────────┘
        │HTTPS JSON/REST + WebSocket
┌───────┴───────────┐  AMQP   ┌────────────────┐
│  API‑Gateway (NGINX) │◀────▶│ notification‑svc │
├───────────────────┤         └────────────────┘
│  auth‑svc        │  gRPC   ┌────────────────┐
│  marketplace‑svc │◀──────▶│ payment‑svc     │
│  fraud‑svc       │         └────────────────┘
│  admin‑svc       │
└───────────────────┘
        │
     PostgreSQL + Redis + Elasticsearch
```

### 2.2 Технологический стек

* **Backend:** Python 3.12, FastAPI, SQLAlchemy 2.0, Pydantic v2
* **Frontend:** Next.js 14, React 18, TypeScript, Tailwind CSS
* **Данные:** PostgreSQL 15, Redis 7, Elasticsearch
* **Сообщения:** RabbitMQ
* **Деплой:** Kubernetes, Docker, GitHub Actions, Terraform
* **Мониторинг:** Prometheus + Grafana, OpenSearch + Fluent Bit

## 3. Пользовательские истории

### 3.1 Основные сценарии

| ID | Пользователь | Сценарий | Ожидаемый результат | Критерий приемки |
|----|--------------|----------|---------------------|------------------|
| US-01 | Гость | Найти предмет по названию | Быстро найти и просмотреть доступные предметы | search-01: P95 < 300ms, релевантность > 0.8 |
| US-02 | Гость | Зарегистрироваться на платформе | Получить доступ к функциям покупки/продажи | signup-01: аккаунт создается, отправляется email |
| US-03 | Пользователь | Пополнить баланс кошелька | Получить средства для покупок | wallet-01: средства доступны через Stripe |
| US-04 | Продавец | Опубликовать лот | Выставить предмет на продажу | listing-01: статус=ACTIVE, комиссия рассчитана |
| US-05 | Продавец | Изменить цену лота | Адаптировать цену к рынку | update-01: цена обновлена, история сохранена |
| US-06 | Продавец | Снять лот с продажи | Убрать предложение с маркетплейса | cancel-01: статус=CANCELLED |
| US-07 | Покупатель | Добавить лот в избранное | Отслеживать интересующие предметы | wishlist-01: лот в списке избранного |
| US-08 | Покупатель | Оплатить лот | Купить предмет с гарантией | txn-01: средства в Escrow, статус=HELD |
| US-09 | Покупатель | Подтвердить получение | Завершить сделку успешно | complete-01: статус=COMPLETED, продавец получает деньги |
| US-10 | Покупатель | Открыть спор | Разрешить конфликт при проблеме | dispute-01: статус=DISPUTED, уведомление модератору |
| US-11 | Пользователь | Оставить отзыв | Оценить контрагента | rating-01: рейтинг обновлен, отзыв отображается |
| US-12 | Модератор | Заблокировать подозрительный лот | Предотвратить мошенничество | mod-01: статус=BANNED, уведомление продавцу |
| US-13 | Модератор | Разрешить спор | Определить исход конфликта | dispute-02: выбрано решение, средства распределены |
| US-14 | Администратор | Просмотр аналитики | Получить данные о работе платформы | admin-01: доступны ключевые метрики и отчеты |

### 3.2 Сценарии ошибок

* `LISTING_NOT_FOUND` — 404 Not Found
* `INSUFFICIENT_FUNDS` — 409 Conflict
* `ESCROW_TIMEOUT` — автоматическое открытие спора (Dispute)
* `INVALID_ITEM_DATA` — 422 Unprocessable Entity
* `AUTHORIZATION_FAILED` — 401 Unauthorized
* `RATE_LIMIT_EXCEEDED` — 429 Too Many Requests

## 4. Функциональные требования

### 4.1 Аутентификация и авторизация

* JWT-аутентификация с access token (15 мин) и refresh token (30 дней)
* Роли: гость, пользователь, продавец, модератор, администратор
* OAuth интеграция со Steam и Discord

**Пример JWT-токена:**
```json
{
  "sub": "af7c441e-2e9c-48f0-8b27-3d39a8f2c9d5",
  "role": "user",
  "email": "user@example.com",
  "iat": 1715507098,
  "exp": 1715508098
}
```

### 4.2 Динамическая категоризация товаров и услуг

Система должна поддерживать различные типы внутриигровых ценностей, которые существенно различаются между играми:

* **Предметы** (оружие, броня, расходники, косметические предметы)
* **Валюта** (золото, кристаллы, внутриигровые монеты)
* **Услуги** (прокачка уровня, прохождение рейдов, обучение)
* **Аккаунты** (полноценные аккаунты с прогрессом)

#### 4.2.1 Динамические атрибуты для предметов

Для поддержки различных типов предметов и их уникальных атрибутов в зависимости от игры, система использует динамическую схему атрибутов:

```json
// Пример структуры метаданных для предметов WoW
{
  "item_type": "equipment",
  "sub_type": "weapon",
  "weapon_type": "sword",
  "level": 70,
  "item_level": 415,
  "stats": {
    "strength": 120,
    "stamina": 85,
    "critical_strike": 45,
    "haste": 30
  },
  "required_level": 60,
  "binding": "bind_on_equip",
  "unique": true,
  "visual_effect": "fiery_glow"
}

// Пример структуры для внутриигровой валюты
{
  "item_type": "currency",
  "currency_type": "gold",
  "amount": 10000,
  "server": "Silvermoon",
  "faction": "Alliance",
  "delivery_method": "auction_house"
}

// Пример структуры для услуг
{
  "item_type": "service",
  "service_type": "leveling",
  "from_level": 1,
  "to_level": 60,
  "character_class": "Warrior",
  "estimated_time": "3 days",
  "includes_gear": true
}
```

#### 4.2.2 Система категорий

Для эффективной работы с множеством игр и типов товаров, система использует иерархическую структуру категорий:

```
┌─ Игра
│  └─ Тип товара
│     └─ Подтип
│        └─ Специфические фильтры
```

**Пример иерархии для World of Warcraft:**
```
World of Warcraft
├── Валюта
│   ├── Золото
│   │   ├── Фильтры: сервер, фракция, метод доставки
│   └── Другие валюты
├── Предметы
│   ├── Оружие
│   │   ├── Одноручное
│   │   │   ├── Фильтры: уровень предмета, характеристики, требуемый уровень
│   │   ├── Двуручное
│   │   └── Дальний бой
│   ├── Броня
│   │   ├── Тканевая
│   │   ├── Кожаная
│   │   ├── Кольчужная
│   │   └── Латная
│   └── Расходники
├── Услуги
│   ├── Прокачка персонажа
│   │   ├── Фильтры: начальный уровень, конечный уровень, класс, срок
│   ├── Рейды и подземелья
│   └── Профессии
└── Аккаунты
    └── Фильтры: уровень, классы, достижения, редкие предметы
```

**Пример иерархии для Counter-Strike 2:**
```
Counter-Strike 2
├── Скины
│   ├── Оружие
│   │   ├── Ножи
│   │   │   ├── Фильтры: редкость, износ, StatTrak
│   │   ├── Пистолеты
│   │   ├── Винтовки
│   │   └── Пистолеты-пулеметы
│   └── Перчатки
├── Наклейки
├── Кейсы
└── Аккаунты
    └── Фильтры: ранг, статистика, количество скинов
```

#### 4.2.3 Модель данных для категоризации

```sql
-- Игры
CREATE TABLE games (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    code TEXT NOT NULL UNIQUE,
    name TEXT NOT NULL,
    icon_url TEXT,
    is_active BOOLEAN DEFAULT TRUE
);

-- Категории товаров
CREATE TABLE item_categories (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    game_id UUID NOT NULL REFERENCES games(id),
    parent_id UUID REFERENCES item_categories(id),
    name TEXT NOT NULL,
    slug TEXT NOT NULL,
    level INTEGER NOT NULL,
    sort_order INTEGER NOT NULL DEFAULT 0,
    CONSTRAINT unique_category_slug_per_game UNIQUE (game_id, slug)
);

-- Атрибуты категорий
CREATE TABLE category_attributes (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    category_id UUID NOT NULL REFERENCES item_categories(id),
    name TEXT NOT NULL,
    display_name TEXT NOT NULL,
    attribute_type TEXT NOT NULL, -- string, number, boolean, enum
    is_required BOOLEAN DEFAULT FALSE,
    is_filterable BOOLEAN DEFAULT FALSE,
    is_searchable BOOLEAN DEFAULT FALSE,
    default_value JSONB,
    validation_rules JSONB,
    enum_values JSONB,
    sort_order INTEGER NOT NULL DEFAULT 0,
    CONSTRAINT unique_attribute_per_category UNIQUE (category_id, name)
);

-- Расширение ItemTemplate
CREATE TABLE item_templates (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    game_id UUID NOT NULL REFERENCES games(id),
    category_id UUID NOT NULL REFERENCES item_categories(id),
    name TEXT NOT NULL,
    description TEXT,
    attributes JSONB NOT NULL DEFAULT '{}'::jsonb,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    is_active BOOLEAN NOT NULL DEFAULT TRUE
);

-- Индексы для поиска
CREATE INDEX idx_item_templates_category ON item_templates(category_id);
CREATE INDEX idx_item_templates_game ON item_templates(game_id);
CREATE INDEX idx_item_templates_attrs ON item_templates USING GIN(attributes);
```

#### 4.2.4 Функциональный пример: Создание листинга с динамическими атрибутами

**Запрос:**
```http
POST /api/v1/listings HTTP/1.1
Content-Type: application/json
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

{
  "game_id": "f8e7d6c5-b4a3-4d21-9e87-1f0e2cd3b4a5",
  "category_id": "a1b2c3d4-e5f6-4a5b-9c8d-7e6f5a4b3c2d",
  "title": "Эпический меч Ледяного ветра +10",
  "price": "49.99",
  "currency": "USD",
  "quantity": 1,
  "attributes": {
    "item_level": 415,
    "required_level": 60,
    "weapon_type": "sword",
    "damage": 2450,
    "stats": {
      "strength": 120,
      "stamina": 85,
      "critical_strike": 45,
      "haste": 30
    },
    "enchantment": "frost_damage",
    "socket_count": 2,
    "binding": "bind_on_equip"
  },
  "delivery_method": "in_game_mail",
  "delivery_time": "within_1_hour",
  "expires_at": "2025-05-31T00:00:00Z",
  "description": "Эпический меч с отличными характеристиками для рыцаря смерти или воина. Передам через внутриигровую почту."
}
```

**Ответ:**
```http
HTTP/1.1 201 Created
Content-Type: application/json

{
  "id": "a27ba44e-0c47-48b5-8643-2e39a8e23fbc",
  "status": "ACTIVE",
  "fee": "5.00",
  "seller_id": "95c31220-b3be-4152-aea6-4d1d9c8c22ac",
  "game": {
    "id": "f8e7d6c5-b4a3-4d21-9e87-1f0e2cd3b4a5",
    "name": "World of Warcraft",
    "icon_url": "/games/wow.png"
  },
  "category": {
    "id": "a1b2c3d4-e5f6-4a5b-9c8d-7e6f5a4b3c2d",
    "name": "Оружие > Одноручное > Мечи"
  },
  "title": "Эпический меч Ледяного ветра +10",
  "attributes": {
    "item_level": 415,
    "required_level": 60,
    "weapon_type": "sword",
    "damage": 2450,
    "stats": {
      "strength": 120,
      "stamina": 85,
      "critical_strike": 45,
      "haste": 30
    },
    "enchantment": "frost_damage",
    "socket_count": 2,
    "binding": "bind_on_equip"
  },
  "price": "49.99",
  "currency": "USD",
  "delivery_method": "in_game_mail",
  "delivery_time": "within_1_hour",
  "created_at": "2025-05-12T14:38:29Z",
  "expires_at": "2025-05-31T00:00:00Z",
  "images": []
}
```

#### 4.2.5 Функциональный пример: Поиск с динамическими фильтрами

**Запрос:**
```http
GET /api/v1/listings?game=world-of-warcraft&category=weapons/one-handed/swords&min_item_level=400&max_item_level=450&stats.strength.min=100&sort=price_asc&limit=20 HTTP/1.1
```

**Ответ:**
```http
HTTP/1.1 200 OK
Content-Type: application/json

{
  "items": [
    {
      "id": "a27ba44e-0c47-48b5-8643-2e39a8e23fbc",
      "title": "Эпический меч Ледяного ветра +10",
      "price": "49.99",
      "currency": "USD",
      "attributes": {
        "item_level": 415,
        "required_level": 60,
        "stats": {
          "strength": 120,
          "stamina": 85
        }
      },
      "images": ["/listings/a27ba44e/1.jpg"],
      "seller": {
        "id": "95c31220-b3be-4152-aea6-4d1d9c8c22ac",
        "display_name": "DragonSlayer",
        "rating": 4.8
      },
      "created_at": "2025-05-12T14:38:29Z"
    },
    // ... другие предметы
  ],
  "filters": {
    "item_level": {
      "min": 410,
      "max": 450,
      "distribution": [
        {"value": 410, "count": 2},
        {"value": 415, "count": 5},
        {"value": 420, "count": 3},
        {"value": 440, "count": 1},
        {"value": 450, "count": 1}
      ]
    },
    "weapon_type": [
      {"value": "sword", "count": 8},
      {"value": "axe", "count": 4}
    ],
    "stats.strength": {
      "min": 100,
      "max": 145,
      "distribution": [
        {"range": "100-110", "count": 3},
        {"range": "111-120", "count": 5},
        {"range": "121-130", "count": 2},
        {"range": "131-145", "count": 2}
      ]
    }
    // ... другие фильтры
  },
  "pagination": {
    "total": 42,
    "limit": 20,
    "offset": 0,
    "next_offset": 20
  }
}
```

#### 4.2.6 Пример: Управление динамическими атрибутами в админ-панели

**Данные категории:**
```json
{
  "id": "a1b2c3d4-e5f6-4a5b-9c8d-7e6f5a4b3c2d",
  "game_id": "f8e7d6c5-b4a3-4d21-9e87-1f0e2cd3b4a5",
  "parent_id": "e9d8c7b6-a5f4-4e3d-2c1b-0a9b8c7d6e5f",
  "name": "Мечи",
  "slug": "swords",
  "level": 3,
  "attributes": [
    {
      "id": "b1a2d3c4-e5f6-7a8b-9c0d-1e2f3a4b5c6d",
      "name": "item_level",
      "display_name": "Уровень предмета",
      "attribute_type": "number",
      "is_required": true,
      "is_filterable": true,
      "is_searchable": false,
      "validation_rules": {
        "min": 1,
        "max": 1000
      },
      "sort_order": 1
    },
    {
      "id": "c1b2a3d4-e5f6-7a8b-9c0d-1e2f3a4b5c6d",
      "name": "required_level",
      "display_name": "Требуемый уровень",
      "attribute_type": "number",
      "is_required": true,
      "is_filterable": true,
      "is_searchable": false,
      "validation_rules": {
        "min": 1,
        "max": 70
      },
      "sort_order": 2
    },
    {
      "id": "d1c2b3a4-e5f6-7a8b-9c0d-1e2f3a4b5c6d",
      "name": "damage",
      "display_name": "Урон",
      "attribute_type": "number",
      "is_required": true,
      "is_filterable": true,
      "is_searchable": false,
      "sort_order": 3
    },
    {
      "id": "e1d2c3b4-a5f6-7a8b-9c0d-1e2f3a4b5c6d",
      "name": "stats",
      "display_name": "Характеристики",
      "attribute_type": "object",
      "is_required": true,
      "is_filterable": true,
      "is_searchable": false,
      "sub_attributes": [
        {
          "name": "strength",
          "display_name": "Сила",
          "attribute_type": "number",
          "is_required": false,
          "is_filterable": true
        },
        {
          "name": "stamina",
          "display_name": "Выносливость",
          "attribute_type": "number",
          "is_required": false,
          "is_filterable": true
        },
        {
          "name": "critical_strike",
          "display_name": "Критический удар",
          "attribute_type": "number",
          "is_required": false,
          "is_filterable": true
        },
        {
          "name": "haste",
          "display_name": "Скорость",
          "attribute_type": "number",
          "is_required": false,
          "is_filterable": true
        }
      ],
      "sort_order": 4
    },
    {
      "id": "f1e2d3c4-b5a6-7a8b-9c0d-1e2f3a4b5c6d",
      "name": "binding",
      "display_name": "Привязка",
      "attribute_type": "enum",
      "is_required": true,
      "is_filterable": true,
      "is_searchable": false,
      "enum_values": [
        {"value": "bind_on_pickup", "label": "Привязывается при получении"},
        {"value": "bind_on_equip", "label": "Привязывается при надевании"},
        {"value": "bind_on_use", "label": "Привязывается при использовании"},
        {"value": "no_binding", "label": "Не привязывается"}
      ],
      "sort_order": 5
    }
  ]
}
```
```

### 4.3 Процесс сделки

* Инициация сделки покупателем
* Escrow-механизм с холдированием средств
* Подтверждение доставки предметов
* Автоматические выплаты продавцам

**Пример последовательности сделки:**
1. Покупатель инициирует транзакцию: `POST /api/v1/transactions`
2. Сервис замораживает средства: `POST /api/v1/payments/hold`
3. Продавец передает предмет покупателю (off-platform)
4. Покупатель подтверждает получение: `POST /api/v1/transactions/{id}/complete`
5. Система освобождает средства продавцу: `POST /api/v1/payments/capture`

### 4.4 Кошелек и платежи

* Внутренний кошелек пользователя для каждой поддерживаемой валюты
* Интеграция со Stripe для пополнения и вывода средств
* Мультивалютная поддержка (USD, EUR, GBP) с автоконверсией
* История транзакций и выписки

**Пример структуры кошелька:**
```json
{
  "id": "6721f4db-e2d4-4e23-bfd3-ba1d98152b0c",
  "user_id": "af7c441e-2e9c-48f0-8b27-3d39a8f2c9d5",
  "currency": "USD",
  "balance": "152.47",
  "transactions": [
    {
      "id": "f5d8e39a-c347-4321-b544-1f2b75c26ef9",
      "type": "DEPOSIT",
      "amount": "100.00",
      "status": "COMPLETED",
      "created_at": "2025-05-10T12:23:45Z"
    },
    {
      "id": "a2e4f918-b62d-4c17-9e88-7d2a3b4c5d6e",
      "type": "PURCHASE",
      "amount": "-19.99",
      "status": "COMPLETED",
      "created_at": "2025-05-11T09:15:22Z",
      "reference_id": "c8c40a32-6e0a-4d32-9c50-e48dd89e77ac"
    }
  ]
}
```

### 4.5 Система споров

* Открытие спора при проблеме с доставкой предмета
* Загрузка доказательств (скриншоты, видео)
* Интерфейс модератора для разрешения споров
* Автоматический возврат средств при тайм-ауте

**Пример создания спора:**
```http
POST /api/v1/disputes HTTP/1.1
Content-Type: application/json
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

{
  "transaction_id": "c8c40a32-6e0a-4d32-9c50-e48dd89e77ac",
  "reason": "ITEM_NOT_RECEIVED",
  "description": "Продавец не передал предмет в течение 24 часов",
  "evidence_urls": [
    "https://marketplace-media.s3.amazonaws.com/evidence/screenshot1.jpg"
  ]
}
```

### 4.6 Уведомления

* Реализация через WebSocket для мгновенных уведомлений
* Push-уведомления в браузере
* Email-уведомления для важных событий
* SMS-уведомления (опционально)

**Пример структуры уведомления:**
```json
{
  "id": "a0f4e9d8-b7c6-4a3b-85e2-1d0c9b8a7f6e",
  "user_id": "af7c441e-2e9c-48f0-8b27-3d39a8f2c9d5",
  "type": "TRANSACTION_COMPLETED",
  "title": "Сделка завершена",
  "body": "Сделка #c8c40a32 успешно завершена. Не забудьте оставить отзыв!",
  "created_at": "2025-05-12T15:42:18Z",
  "read": false,
  "action_url": "/transactions/c8c40a32-6e0a-4d32-9c50-e48dd89e77ac/review"
}
```

### 4.7 Аналитическая панель для администраторов

* Дашборд с ключевыми метриками бизнеса
* Детальная статистика по продажам, пользователям и спорам
* Графики активности и конверсий
* Экспорт отчетов в CSV/Excel

**Ключевые метрики дашборда:**
* Общий объем продаж (GMV) за период
* Количество активных пользователей (DAU/MAU)
* Средний чек и комиссия платформы
* Conversion rate воронки покупки
* Процент успешно закрытых споров
* TOP-10 популярных предметов и игр

**Пример структуры дашборда:**
```
┌─────────────────────────┐ ┌─────────────────────────┐
│ Ключевые метрики        │ │ Продажи по играм        │
│ GMV: $125,432           │ │ [Круговая диаграмма]    │
│ Транзакции: 834         │ │                         │
│ Ср. чек: $150.4         │ │                         │
│ Комиссия: $12,543       │ │                         │
└─────────────────────────┘ └─────────────────────────┘
┌─────────────────────────┐ ┌─────────────────────────┐
│ Активность пользователей│ │ Статистика споров       │
│ [График по дням]        │ │ Открыто: 24             │
│                         │ │ Решено: 22              │
│                         │ │ Среднее время: 1.2 дня  │
│                         │ │ В пользу покупателя: 60%│
└─────────────────────────┘ └─────────────────────────┘
┌───────────────────────────────────────────────────────┐
│ Последние транзакции                                  │
│ ID         | Сумма   | Игра        | Статус | Время   │
│ a27ba44e.. | $19.99  | Dragon Quest| COMPLETED| 14:38 │
│ f8e91c5d.. | $45.50  | CS 2        | ESCROW  | 13:22  │
│ ...                                                    │
└───────────────────────────────────────────────────────┘
```

**Экраны админ-панели:**
1. Главный дашборд (обзор метрик)
2. Управление пользователями
3. Мониторинг транзакций
4. Модерация листингов
5. Разрешение споров
6. Настройки комиссий и лимитов
7. Отчеты и аналитика

## 5. API и интеграции

### 5.1 REST API

Все сервисы публикуют OpenAPI 3.1 спецификацию, генерируемую из код-аннотаций.

| Сервис | Основные эндпоинты |
|--------|---------------------|
| auth-svc | `/v1/auth/register`, `/v1/auth/login`, `/v1/auth/refresh` |
| marketplace-svc | `/v1/listings`, `/v1/transactions`, `/v1/disputes` |
| payment-svc | `/v1/payments/hold`, `/v1/payments/capture`, `/v1/wallet` |
| notification-svc | `/v1/notifications`, `/v1/subscriptions` |
| admin-svc | `/v1/admin/dashboard`, `/v1/admin/reports` |

### 5.2 WebSockets API

```javascript
// Пример подключения к WebSocket
const socket = new WebSocket('wss://api.gametrade.com/v1/ws');

// Авторизация через токен
socket.onopen = () => {
  socket.send(JSON.stringify({
    type: 'auth',
    token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
  }));
};

// Обработка уведомлений
socket.onmessage = (event) => {
  const notification = JSON.parse(event.data);
  console.log('Получено уведомление:', notification);
};
```

### 5.3 Внешние интеграции

* **Stripe API** — платежи и escrow
* **Steam API** — авторизация и проверка предметов
* **Discord OAuth** — альтернативная авторизация
* **AWS S3** — хранение изображений и медиафайлов
* **SendGrid/SES** — отправка email-уведомлений

### 6.4 Динамическая схема данных для категоризации

Для поддержки различных игр с их уникальными типами товаров и атрибутами предметов необходима гибкая схема данных:

```sql
-- Игры
CREATE TABLE games (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    code TEXT NOT NULL UNIQUE,
    name TEXT NOT NULL,
    icon_url TEXT,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Категории товаров (иерархическая структура)
CREATE TABLE item_categories (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    game_id UUID NOT NULL REFERENCES games(id),
    parent_id UUID REFERENCES item_categories(id),
    name TEXT NOT NULL,
    slug TEXT NOT NULL,
    level INTEGER NOT NULL, -- уровень вложенности
    sort_order INTEGER NOT NULL DEFAULT 0,
    icon_url TEXT,
    is_active BOOLEAN DEFAULT TRUE,
    CONSTRAINT unique_category_slug_per_game UNIQUE (game_id, slug)
);

-- Атрибуты категорий
CREATE TABLE category_attributes (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    category_id UUID NOT NULL REFERENCES item_categories(id),
    name TEXT NOT NULL,
    display_name TEXT NOT NULL,
    attribute_type TEXT NOT NULL, -- string, number, boolean, enum, object
    is_required BOOLEAN DEFAULT FALSE,
    is_filterable BOOLEAN DEFAULT FALSE,
    is_searchable BOOLEAN DEFAULT FALSE,
    default_value JSONB,
    validation_rules JSONB,
    enum_values JSONB,
    sub_attributes JSONB, -- для вложенных объектов
    sort_order INTEGER NOT NULL DEFAULT 0,
    CONSTRAINT unique_attribute_per_category UNIQUE (category_id, name)
);

-- Шаблоны предметов с динамическими атрибутами
CREATE TABLE item_templates (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    game_id UUID NOT NULL REFERENCES games(id),
    category_id UUID NOT NULL REFERENCES item_categories(id),
    name TEXT NOT NULL,
    description TEXT,
    attributes JSONB NOT NULL DEFAULT '{}'::jsonb,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    is_active BOOLEAN NOT NULL DEFAULT TRUE
);

-- Расширенная таблица лотов для поддержки категорий и атрибутов
CREATE TABLE listings (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    seller_id UUID NOT NULL REFERENCES users(id),
    game_id UUID NOT NULL REFERENCES games(id),
    category_id UUID NOT NULL REFERENCES item_categories(id),
    item_template_id UUID REFERENCES item_templates(id), -- опционально
    title TEXT NOT NULL,
    description TEXT,
    price NUMERIC(14,2) NOT NULL,
    currency CHAR(3) NOT NULL,
    quantity INTEGER NOT NULL DEFAULT 1,
    attributes JSONB NOT NULL DEFAULT '{}'::jsonb,
    delivery_method TEXT NOT NULL,
    delivery_time TEXT NOT NULL,
    status listing_status NOT NULL DEFAULT 'PENDING',
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    expires_at TIMESTAMPTZ NOT NULL
);

-- Изображения лотов
CREATE TABLE listing_images (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    listing_id UUID NOT NULL REFERENCES listings(id) ON DELETE CASCADE,
    url TEXT NOT NULL,
    sort_order INTEGER NOT NULL DEFAULT 0
);

-- Индексы для эффективного поиска
CREATE INDEX idx_listings_game ON listings(game_id);
CREATE INDEX idx_listings_category ON listings(category_id);
CREATE INDEX idx_listings_seller ON listings(seller_id);
CREATE INDEX idx_listings_status ON listings(status);
CREATE INDEX idx_listings_price ON listings(price);
CREATE INDEX idx_item_templates_game ON item_templates(game_id);
CREATE INDEX idx_item_templates_category ON item_templates(category_id);
CREATE INDEX idx_item_categories_game ON item_categories(game_id);
CREATE INDEX idx_item_categories_parent ON item_categories(parent_id);

-- Полнотекстовый поиск
CREATE INDEX idx_listings_title_trgm ON listings USING GIN (title gin_trgm_ops);
CREATE INDEX idx_listings_description_trgm ON listings USING GIN (description gin_trgm_ops);

-- Индексы для JSON атрибутов (для фильтрации)
CREATE INDEX idx_listings_attrs ON listings USING GIN(attributes);
CREATE INDEX idx_item_templates_attrs ON item_templates USING GIN(attributes);
```

## 7. Frontend

### 7.1 Ключевые страницы

* Главная страница (последние лоты, популярные игры)
* Каталог предметов с фильтрами
* Страница лота с деталями и кнопкой покупки
* Личный кабинет (профиль, кошелек, история)
* Страница продавца (форма создания лота)
* Страница покупки (подтверждение, оплата)
* Страница спора (доказательства, переписка)
* Админ-панель с дашбордами и управлением

### 7.2 Макеты UI

```
┌─ Главная страница ─────────────────────────────────────┐
│                                                         │
│  ┌──────────┐ ┌───────────────────────────────────┐    │
│  │ Логотип  │ │ Поиск                        [🔍] │    │
│  └──────────┘ └───────────────────────────────────┘    │
│                                                         │
│  ┌─────────┐ ┌─────────┐ ┌─────────┐ ┌─────────┐       │
│  │ Игра 1  │ │ Игра 2  │ │ Игра 3  │ │ Игра 4  │ ...   │
│  └─────────┘ └─────────┘ └─────────┘ └─────────┘       │
│                                                         │
│  Популярные предметы                                    │
│  ┌───────────┐ ┌───────────┐ ┌───────────┐             │
│  │ [Изобр.]  │ │ [Изобр.]  │ │ [Изобр.]  │             │
│  │ Предмет 1 │ │ Предмет 2 │ │ Предмет 3 │ ...         │
│  │ $19.99    │ │ $24.50    │ │ $12.75    │             │
│  └───────────┘ └───────────┘ └───────────┘             │
│                                                         │
│  Последние добавленные                                  │
│  ┌───────────┐ ┌───────────┐ ┌───────────┐             │
│  │ [Изобр.]  │ │ [Изобр.]  │ │ [Изобр.]  │             │
│  │ Предмет 4 │ │ Предмет 5 │ │ Предмет 6 │ ...         │
│  │ $35.00    │ │ $8.99     │ │ $42.25    │             │
│  └───────────┘ └───────────┘ └───────────┘             │
└─────────────────────────────────────────────────────────┘
```

## 8. Технические требования

### 8.1 Производительность

* P95 latency < 200 ms для API запросов
* Обработка 1000 RPS на пиковых нагрузках
* Время загрузки страницы < 1.5 сек (FCP)
* SLA 99.9% (43.8 минут даунтайма в месяц)

### 8.2 Масштабируемость

* Горизонтальное масштабирование через Kubernetes HPA
* Шардирование базы данных по мере роста
* Кеширование часто запрашиваемых данных в Redis
* Асинхронная обработка тяжелых операций через очереди

### 8.3 Безопасность

* OWASP Top-10 проверки (автоматические и ручные)
* Хранение паролей с использованием bcrypt/Argon2
* Rate limiting для API запросов
* HTTPS для всех соединений
* Rotations секретов каждые 90 дней
* WAF для защиты от DDoS и других атак

## 9. Инфраструктура

### 9.1 Развертывание

* Kubernetes (EKS) с автомасштабированием
* Multi-AZ для обеспечения высокой доступности
* CI/CD через GitHub Actions + ArgoCD
* Blue/Green deployments для zero-downtime обновлений

### 9.2 Мониторинг

* Prometheus + Grafana для системных метрик
* OpenTelemetry + Jaeger для трассировки запросов
* OpenSearch + Fluent Bit для логов
* PagerDuty интеграция для алертинга
* Custom дашборды для бизнес-метрик

## 10. План разработки

### 10.1 Фазы проекта

| Фаза | Длительность | Цель | Выходной артефакт |
|------|--------------|------|-------------------|
| Дизайн | 2 недели | Проработка архитектуры и интерфейсов | Утвержденные макеты и схемы |
| Alpha | 6 недель | Базовая функциональность | MVP с auth+listings+transactions |
| Beta | 4 недели | Полный функционал | Версия для внутреннего тестирования |
| RC | 2 недели | Оптимизация и bug fixing | Предрелизная версия |
| Релиз | 1 неделя | Публичный запуск | Версия 1.0 |

### 10.2 Приоритеты разработки

1. Система аутентификации и авторизации
2. Управление лотами и поиск
3. Процесс покупки и Escrow
4. Система уведомлений
5. Кошельки и платежи
6. Система споров и арбитража
7. Админ-панель и аналитика
8. Оптимизация и масштабирование

## 11. Риски и митигации

| Риск | Вероятность | Влияние | Митигация |
|------|-------------|---------|-----------|
| Массовые попытки мошенничества | Высокая | Высокое | Escrow + hold 48h, ML fraud detection |
| DDoS атаки | Средняя | Высокое | AWS Shield, rate limiting, CDN |
| Проблемы с доступностью Stripe | Низкая | Среднее | Retry strategy с backoff, мониторинг |
| Недостаточная производительность БД | Средняя | Высокое | Индексы, шардирование, кеширование |
| Отток пользователей из-за UX | Средняя | Высокое | A/B тестирование, аналитика behavior flow |

## 12. Метрики успеха

* > 10,000 DAU через 3 месяца после запуска
* > 50,000 листингов
* Конверсия просмотр → покупка > 5%
* Средний чек > $30
* Процент споров < 2% от транзакций
* Время разрешения споров < 48 часов
* Комиссия платформы > $50,000 в месяц

## 13. Примеры кода и интеграций

### 13.1 Пример создания лота (Backend, Python/FastAPI)

```python
# marketplace/api/routers/listings.py
from fastapi import APIRouter, Depends, HTTPException, status
from uuid import UUID

from marketplace.api.dependencies import get_current_user, get_listing_service
from marketplace.api.schemas.listings import ListingCreate, ListingResponse
from marketplace.services.listing_service import ListingService

router = APIRouter(prefix="/v1/listings", tags=["listings"])

@router.post("", response_model=ListingResponse, status_code=status.HTTP_201_CREATED)
async def create_listing(
    listing_data: ListingCreate,
    service: ListingService = Depends(get_listing_service),
    user_id: UUID = Depends(get_current_user)
):
    """
    Создание нового лота на продажу.
    
    Продавец может опубликовать лот с детальной информацией о предмете,
    указать цену и срок действия объявления.
    """
    try:
        listing = await service.create_listing(
            item_template_id=listing_data.item_id,
            seller_id=user_id,
            price=listing_data.price,
            currency=listing_data.currency,
            expires_at=listing_data.expires_at,
            description=listing_data.description
        )
        return listing
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=str(e)
        )
```

### 13.2 Пример обработки транзакции (Service Layer)

```python
# marketplace/services/transaction_service.py
from datetime import datetime
from decimal import Decimal
from uuid import UUID, uuid4

from marketplace.domain.listing import ListingStatus
from marketplace.domain.transaction import Transaction, TransactionStatus
from marketplace.events.publisher import EventPublisher
from marketplace.repositories.unit_of_work import UnitOfWork
from marketplace.services.payment_client import PaymentClient

class TransactionService:
    """Service для управления транзакциями покупок"""
    
    def __init__(
        self, 
        uow: UnitOfWork, 
        payment_client: PaymentClient,
        event_publisher: EventPublisher
    ):
        self.uow = uow
        self.payment_client = payment_client
        self.event_publisher = event_publisher
        
    async def create_transaction(
        self, 
        listing_id: UUID, 
        buyer_id: UUID
    ) -> Transaction:
        """
        Создает новую транзакцию покупки:
        1. Проверяет доступность лота
        2. Проверяет баланс покупателя
        3. Создает Escrow-холд через Stripe
        4. Обновляет статусы и балансы
        5. Публикует событие
        """
        async with self.uow:
            # Основная логика транзакции
            # ...
            
            # Пример публикации события
            await self.event_publisher.publish_transaction_created(
                txn_id=str(transaction.id),
                buyer_id=str(buyer_id),
                seller_id=str(listing.seller_id),
                listing_id=str(listing_id),
                amount=str(listing.price),
                currency=listing.currency
            )
            
            return transaction
```

### 13.3 Пример формы покупки (Frontend, React/TypeScript)

```typescript
// components/PurchaseForm.tsx
import React, { useState } from 'react';
import { useRouter } from 'next/router';
import { Button, Card, Text, Input, Spinner } from 'ui-components';
import { useCreateTransaction } from '@/hooks/api/useTransactions';
import { formatCurrency } from '@/utils/currency';

interface PurchaseFormProps {
  listingId: string;
  itemName: string;
  price: number;
  currency: string;
  sellerName: string;
}

export const PurchaseForm: React.FC<PurchaseFormProps> = ({
  listingId,
  itemName,
  price,
  currency,
  sellerName
}) => {
  const [confirmed, setConfirmed] = useState(false);
  const router = useRouter();
  const { mutate, isLoading, error } = useCreateTransaction();
  
  const handlePurchase = () => {
    if (!confirmed) return;
    
    mutate({ listingId }, {
      onSuccess: (data) => {
        router.push(`/transactions/${data.id}`);
      }
    });
  };
  
  return (
    <Card className="p-4 shadow-md rounded-lg">
      <Text size="lg" weight="bold">Покупка: {itemName}</Text>
      <Text size="md">Продавец: {sellerName}</Text>
      
      <div className="mt-4 mb-4">
        <Text size="xl" weight="bold" className="text-primary">
          {formatCurrency(price, currency)}
        </Text>
        <Text size="sm" className="text-gray-500">
          Включая комиссию платформы: {formatCurrency(price * 0.1, currency)}
        </Text>
      </div>
      
      <div className="mb-4">
        <label className="flex items-center">
          <input
            type="checkbox"
            checked={confirmed}
            onChange={() => setConfirmed(!confirmed)}
            className="mr-2"
          />
          <Text size="sm">
            Я подтверждаю, что ознакомился с условиями покупки и 
            согласен с правилами платформы
          </Text>
        </label>
      </div>
      
      {error && (
        <Text color="error" size="sm" className="mb-2">
          {error.message}
        </Text>
      )}
      
      <Button
        variant="primary"
        size="lg"
        disabled={!confirmed || isLoading}
        onClick={handlePurchase}
        className="w-full"
      >
        {isLoading ? <Spinner size="sm" /> : 'Подтвердить покупку'}
      </Button>
    </Card>
  );
};
```

### 13.4 Пример админ-дашборда с метриками

```typescript
// pages/admin/dashboard.tsx
import React, { useEffect } from 'react';
import { AdminLayout } from '@/layouts/AdminLayout';
import { MetricCard, BarChart, LineChart, PieChart, DataTable } from '@/components/admin';
import { useDashboardStats, useRecentTransactions } from '@/hooks/api/admin';

const AdminDashboard: React.FC = () => {
  const { data: stats, isLoading: statsLoading } = useDashboardStats();
  const { data: transactions, isLoading: txnsLoading } = useRecentTransactions();
  
  return (
    <AdminLayout title="Панель управления">
      <div className="grid grid-cols-4 gap-4 mb-6">
        <MetricCard
          title="GMV"
          value={stats?.gmv || 0}
          format="currency"
          trend={stats?.gmvTrend || 0}
          icon="chart-line"
          loading={statsLoading}
        />
        <MetricCard
          title="Транзакции"
          value={stats?.transactions || 0}
          trend={stats?.transactionsTrend || 0}
          icon="shopping-cart"
          loading={statsLoading}
        />
        <MetricCard
          title="Новые пользователи"
          value={stats?.newUsers || 0}
          trend={stats?.newUsersTrend || 0}
          icon="users"
          loading={statsLoading}
        />
        <MetricCard
          title="Активные споры"
          value={stats?.activeDisputes || 0}
          trend={stats?.activeDisputesTrend || 0}
          icon="exclamation-triangle"
          loading={statsLoading}
        />
      </div>
      
      <div className="grid grid-cols-2 gap-6 mb-6">
        <div className="bg-white p-4 rounded-lg shadow">
          <h3 className="text-lg font-semibold mb-4">Продажи по дням</h3>
          <LineChart
            data={stats?.salesByDay || []}
            xKey="date"
            yKey="amount"
            loading={statsLoading}
          />
        </div>
        <div className="bg-white p-4 rounded-lg shadow">
          <h3 className="text-lg font-semibold mb-4">Топ игр</h3>
          <PieChart
            data={stats?.topGames || []}
            nameKey="game"
            valueKey="percentage"
            loading={statsLoading}
          />
        </div>
      </div>
      
      <div className="bg-white p-4 rounded-lg shadow mb-6">
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-lg font-semibold">Последние транзакции</h3>
          <button className="text-primary-600 hover:underline">
            Смотреть все
          </button>
        </div>
        <DataTable
          data={transactions || []}
          columns={[
            { header: 'ID', accessor: 'id', truncate: true },
            { header: 'Покупатель', accessor: 'buyerName' },
            { header: 'Предмет', accessor: 'itemName' },
            { header: 'Сумма', accessor: 'amount', type: 'currency' },
            { header: 'Статус', accessor: 'status', type: 'badge' },
            { header: 'Дата', accessor: 'createdAt', type: 'datetime' },
          ]}
          loading={txnsLoading}
        />
      </div>
    </AdminLayout>
  );
};

export default AdminDashboard;
```

## 14. Приложения

### 14.1 API Эндпоинты

#### auth-service
* POST /v1/auth/register - Регистрация
* POST /v1/auth/login - Авторизация
* POST /v1/auth/refresh - Обновление токена
* GET /v1/auth/me - Профиль текущего пользователя
* PUT /v1/auth/profile - Обновление профиля

#### marketplace-service
* GET /v1/listings - Поиск лотов
* POST /v1/listings - Создание лота
* GET /v1/listings/{id} - Получение лота
* PATCH /v1/listings/{id} - Обновление лота
* DELETE /v1/listings/{id} - Удаление лота
* GET /v1/games - Список игр
* GET /v1/items - Каталог предметов

#### payment-service
* GET /v1/wallet - Кошелек пользователя
* POST /v1/wallet/deposit - Пополнение счета
* POST /v1/wallet/withdraw - Вывод средств
* GET /v1/wallet/transactions - История транзакций
* POST /v1/payments/hold - Создание холда
* POST /v1/payments/capture - Разблокировка средств
* POST /v1/payments/refund - Возврат

#### transaction-service
* POST /v1/transactions - Создание сделки
* GET /v1/transactions/{id} - Информация о сделке
* POST /v1/transactions/{id}/complete - Подтверждение получения
* GET /v1/transactions/history - История сделок
* POST /v1/disputes - Открытие спора
* GET /v1/disputes/{id} - Получение спора
* POST /v1/disputes/{id}/messages - Отправка сообщения
* POST /v1/disputes/{id}/resolve - Разрешение спора

#### admin-service
* GET /v1/admin/dashboard - Общая статистика
* GET /v1/admin/users - Управление пользователями
* GET /v1/admin/transactions - Мониторинг транзакций
* GET /v1/admin/disputes - Модерация споров
* GET /v1/admin/settings - Настройки платформы
* GET /v1/admin/reports - Формирование отчетов

### 14.2 Системные требования

#### Server Requirements
* CPU: Min 4 vCPU (рекомендуется 8 vCPU)
* RAM: Min 8GB (рекомендуется 16GB)
* Хранилище: SSD 100GB+
* Сеть: 1Gbps, оптимизированный для низкой латентности

#### Database Requirements
* PostgreSQL 15+
* Min 8GB RAM, 4 vCPU
* Диск: 200GB SSD
* Репликация: Master + Read Replica

#### Client Requirements
* Поддерживаемые браузеры: Chrome 90+, Firefox 90+, Safari 14+, Edge 90+
* Минимальная скорость интернета: 5 Mbps
* Разрешение экрана: Мин. 1366x768

### 14.3 Глоссарий системных сообщений

| Код ошибки | HTTP Code | Описание |
|------------|-----------|----------|
| AUTH_001 | 401 | Неверные учетные данные |
| AUTH_002 | 401 | Токен истек |
| AUTH_003 | 403 | Недостаточно прав |
| LISTING_001 | 404 | Лот не найден |
| LISTING_002 | 400 | Некорректные данные лота |
| LISTING_003 | 403 | Нет прав на редактирование лота |
| TXN_001 | 409 | Недостаточно средств |
| TXN_002 | 400 | Ошибка создания транзакции |
| TXN_003 | 409 | Транзакция уже завершена |
| PAYMENT_001 | 400 | Ошибка платежного шлюза |
| PAYMENT_002 | 422 | Платеж отклонен |

## 15. Технологический стек и файловая структура

### 15.1 Технологический стек

#### Backend
* **Язык программирования:** Python 3.12
* **Web-фреймворк:** FastAPI 0.110.0
* **ORM:** SQLAlchemy 2.0 + Alembic (миграции)
* **Валидация данных:** Pydantic v2
* **Асинхронная обработка:** asyncio, uvloop
* **Базы данных:**
  * PostgreSQL 15 (основное хранилище данных)
  * Redis 7 (кеширование, сессии, rate limiting)
  * Elasticsearch 8 (полнотекстовый поиск)
* **Брокер сообщений:** RabbitMQ с aio-pika
* **Авторизация:** JWT с использованием python-jose
* **Шифрование:** passlib + bcrypt
* **API-документация:** OpenAPI 3.1 с Swagger UI
* **Тестирование:** pytest, pytest-asyncio, pytest-cov, httpx, Testcontainers
* **Линтеры и форматтеры:** black, isort, mypy, flake8, pylint

#### Frontend
* **Фреймворк:** Next.js 14 (React 18 + TypeScript)
* **Стилизация:** Tailwind CSS, shadcn/ui, Headless UI
* **Управление состоянием:** React Query, Zustand
* **Формы:** React Hook Form + Zod (валидация)
* **Визуализация данных:** Recharts
* **Локализация:** next-intl
* **Работа с датами:** date-fns
* **Работа с изображениями:** next/image + react-dropzone
* **WebSocket:** SWR + socket.io-client
* **Тестирование:** Jest, React Testing Library, Playwright

#### DevOps & Инфраструктура
* **Контейнеризация:** Docker + Docker Compose
* **Оркестрация:** Kubernetes (EKS)
* **CI/CD:** GitHub Actions
* **Управление инфраструктурой:** Terraform
* **Мониторинг:** Prometheus + Grafana
* **Логирование:** OpenSearch + Fluent Bit
* **Трассировка:** Jaeger (OpenTelemetry)
* **Безопасность:** AWS WAF, OWASP ZAP, Snyk

### 15.2 Файловая структура проекта

#### Общая структура (монорепозиторий)

```
gametrade/
├── .github/                  # CI/CD пайплайны и GitHub Actions
│   └── workflows/            # Настройки для CI/CD
├── backend/                  # Микросервисы бэкенда
│   ├── auth-svc/             # Сервис аутентификации
│   ├── marketplace-svc/      # Сервис маркетплейса
│   ├── payment-svc/          # Сервис платежей
│   ├── notification-svc/     # Сервис уведомлений
│   ├── admin-svc/            # Сервис администрирования
│   └── shared/               # Общий код для микросервисов
├── frontend/                 # Next.js приложение
├── infrastructure/           # Конфигурация инфраструктуры
│   ├── terraform/            # Terraform модули
│   ├── k8s/                  # Kubernetes манифесты
│   └── docker/               # Docker-конфиги
├── docs/                     # Документация
├── tools/                    # Скрипты и утилиты
└── README.md                 # Главная документация проекта
```

#### Структура микросервиса (на примере marketplace-svc)

```
marketplace-svc/
├── Dockerfile                # Конфигурация для Docker-образа
├── pyproject.toml           # Зависимости и конфигурация проекта
├── README.md                # Документация сервиса
├── src/
│   └── marketplace/
│       ├── __init__.py
│       ├── main.py          # Точка входа приложения
│       ├── config.py        # Конфигурация и настройки
│       ├── api/             # API слой
│       │   ├── __init__.py
│       │   ├── dependencies.py  # FastAPI зависимости
│       │   ├── errors.py    # Обработка ошибок
│       │   ├── routers/     # Маршруты API
│       │   │   ├── __init__.py
│       │   │   ├── listings.py
│       │   │   ├── transactions.py
│       │   │   └── ...
│       │   └── schemas/     # Pydantic-модели
│       │       ├── __init__.py
│       │       ├── listings.py
│       │       ├── common.py
│       │       └── ...
│       ├── domain/          # Доменные модели и бизнес-логика
│       │   ├── __init__.py
│       │   ├── listing.py
│       │   ├── transaction.py
│       │   ├── category.py
│       │   ├── game.py
│       │   └── ...
│       ├── repositories/    # Доступ к данным
│       │   ├── __init__.py
│       │   ├── base.py
│       │   ├── unit_of_work.py
│       │   ├── listing_repository.py
│       │   └── ...
│       ├── services/        # Сервисный слой
│       │   ├── __init__.py
│       │   ├── listing_service.py
│       │   ├── transaction_service.py
│       │   ├── search_service.py
│       │   └── ...
│       ├── events/          # Обработка событий
│       │   ├── __init__.py
│       │   ├── publisher.py
│       │   ├── consumer.py
│       │   └── schemas/     # Avro-схемы событий
│       └── infrastructure/  # Инфраструктурные компоненты
│           ├── __init__.py
│           ├── database.py
│           ├── redis.py
│           ├── elasticsearch.py
│           └── messaging.py
├── tests/                   # Тесты
│   ├── conftest.py
│   ├── unit/               # Модульные тесты
│   ├── integration/        # Интеграционные тесты
│   └── e2e/                # End-to-end тесты
└── migrations/             # Alembic миграции базы данных
    ├── env.py
    ├── versions/
    └── script.py.mako
```

#### Структура frontend-приложения

```
frontend/
├── .next/                  # Сгенерированные Next.js файлы
├── public/                 # Статические ресурсы
│   ├── images/
│   ├── fonts/
│   └── locales/            # Файлы локализации
├── src/
│   ├── app/                # App Router Next.js
│   │   ├── layout.tsx      # Корневой layout
│   │   ├── page.tsx        # Главная страница
│   │   ├── (auth)/         # Роуты аутентификации
│   │   │   ├── login/
│   │   │   └── register/
│   │   ├── listings/       # Роуты листингов
│   │   │   ├── [id]/       # Детальная страница листинга
│   │   │   └── create/
│   │   ├── account/        # Личный кабинет
│   │   ├── transactions/   # Транзакции
│   │   ├── admin/          # Админ-панель
│   │   │   ├── dashboard/
│   │   │   ├── users/
│   │   │   └── listings/
│   │   └── api/            # API роуты
│   ├── components/         # React-компоненты
│   │   ├── ui/             # Базовые UI-компоненты
│   │   │   ├── button.tsx
│   │   │   ├── input.tsx
│   │   │   └── ...
│   │   ├── listings/       # Компоненты листингов
│   │   ├── auth/           # Компоненты аутентификации
│   │   ├── layout/         # Компоненты лейаута
│   │   └── ...
│   ├── hooks/              # Кастомные React-хуки
│   │   ├── use-auth.tsx
│   │   ├── use-listings.tsx
│   │   └── ...
│   ├── lib/                # Библиотеки и утилиты
│   │   ├── api-client.ts   # HTTP клиент
│   │   ├── auth.ts         # Утилиты для аутентификации
│   │   ├── utils.ts        # Общие утилиты
│   │   └── ...
│   ├── styles/             # Глобальные стили
│   ├── types/              # TypeScript типы
│   └── providers/          # React контекст-провайдеры
├── tailwind.config.js      # Конфигурация Tailwind
├── next.config.js          # Конфигурация Next.js
├── tsconfig.json           # Конфигурация TypeScript
└── package.json            # Зависимости и скрипты
```

### 15.3 Общий визуальный стиль

Приложение будет выполнено в современном, чистом дизайне с акцентом на игровую тематику, но без излишней "геймификации", чтобы сохранить профессиональный вид торговой площадки.

#### Цветовая схема:
* **Основные цвета:**
  * Синий (#3B82F6) - основной акцентный цвет
  * Темно-синий (#1E40AF) - для кнопок и важных элементов
  * Белый (#FFFFFF) - фон основного контента
  * Темно-серый (#1F2937) - для текста
* **Вторичные цвета:**
  * Зеленый (#10B981) - успешные действия
  * Красный (#EF4444) - ошибки и предупреждения
  * Желтый (#F59E0B) - уведомления
  * Светло-серый (#F3F4F6) - фон второстепенных элементов

#### Типографика:
* **Основной шрифт:** Inter (без засечек)
* **Заголовки:** 
  * H1: 32px, bold
  * H2: 24px, semi-bold
  * H3: 20px, semi-bold
* **Основной текст:** 16px, regular
* **Вспомогательный текст:** 14px, regular

#### UI-компоненты:
* Скругленные углы (border-radius: 8px)
* Легкие тени для карточек и модальных окон
* Минималистичные иконки (Lucide icons)
* Плавные анимации переходов и состояний