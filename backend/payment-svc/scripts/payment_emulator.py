#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API payment-svc –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ –ø—Ä–æ–¥–∞–∂
—á–µ—Ä–µ–∑ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã API –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î
"""

import os
import sys
import json
import asyncio
import random
import requests
from datetime import datetime, timedelta
import uuid

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# PAYMENT_SERVICE_URL = "http://localhost/api/payment"  # URL –∫ API payment-svc
PAYMENT_SERVICE_URL = "http://payment-svc:8000"  # URL –∫ API payment-svc –≤–Ω—É—Ç—Ä–∏ Docker-—Å–µ—Ç–∏
DATA_DIR = "scripts/seed/data"
AUTH_DATA_FILE = os.path.join(DATA_DIR, "auth_seed_data.json")
MARKETPLACE_DATA_FILE = os.path.join(DATA_DIR, "marketplace_seed_data.json")
DATA_FILE = os.path.join(DATA_DIR, "payment_seed_data.json")

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
def prepare_export_dir():
    """
    –°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
    """
    os.makedirs(DATA_DIR, exist_ok=True)
    print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {DATA_DIR} —Å–æ–∑–¥–∞–Ω–∞/—Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω
def check_service():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Å–µ—Ä–≤–∏—Å payment-svc
    """
    try:
        response = requests.get(f"{PAYMENT_SERVICE_URL}/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ –°–µ—Ä–≤–∏—Å payment-svc –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            print(f"‚ùå –°–µ—Ä–≤–∏—Å payment-svc –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            return False
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞ payment-svc: {e}")
        return False

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
def load_user_data():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
    
    Returns:
        list: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    try:
        with open(AUTH_DATA_FILE, 'r') as f:
            data = json.load(f)
            if "users" in data and len(data["users"]) > 0:
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data['users'])} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ {AUTH_DATA_FILE}")
                return data["users"]
            else:
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª–µ")
                return []
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {AUTH_DATA_FILE}")
        return []
    except json.JSONDecodeError:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON –∏–∑ —Ñ–∞–π–ª–∞: {AUTH_DATA_FILE}")
        return []

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞
def load_listing_data():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞
    
    Returns:
        list: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    """
    try:
        with open(MARKETPLACE_DATA_FILE, 'r') as f:
            data = json.load(f)
            if "listings" in data and len(data["listings"]) > 0:
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data['listings'])} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ {MARKETPLACE_DATA_FILE}")
                return data["listings"]
            else:
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ —Ñ–∞–π–ª–µ")
                return []
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {MARKETPLACE_DATA_FILE}")
        return []
    except json.JSONDecodeError:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON –∏–∑ —Ñ–∞–π–ª–∞: {MARKETPLACE_DATA_FILE}")
        return []

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
def check_existing_data():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ
    
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
    """
    try:
        with open(DATA_FILE, 'r') as f:
            data = json.load(f)
            if data:
                print(f"‚ö†Ô∏è –£–∂–µ –µ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö.")
                return data
            else:
                return {}
    except FileNotFoundError:
        return {}  # –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    except json.JSONDecodeError:
        return {}  # –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def create_wallets(users):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–æ—à–µ–ª—å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ API
    
    Args:
        users: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    Returns:
        list: –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
    """
    wallets = []
    
    for user in users:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        token = user.get("token")
        if not token:
            print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.get('username')} –Ω–µ –∏–º–µ–µ—Ç —Ç–æ–∫–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞")
            continue
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ—à–µ–ª–µ–∫ —á–µ—Ä–µ–∑ API
        print(f"üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('username')}")
        
        try:
            headers = {"Authorization": f"Bearer {token}"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–æ—à–µ–ª–µ–∫
            check_response = requests.get(
                f"{PAYMENT_SERVICE_URL}/wallets/my",
                headers=headers,
                timeout=10
            )
            
            wallet = None
            
            # –ï—Å–ª–∏ –∫–æ—à–µ–ª–µ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if check_response.status_code == 200:
                wallet = check_response.json()
                print(f"   ‚úÖ –ö–æ—à–µ–ª–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('username')} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            # –ï—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            else:
                # –°–æ–∑–¥–∞–µ–º –∫–æ—à–µ–ª–µ–∫
                wallet_response = requests.post(
                    f"{PAYMENT_SERVICE_URL}/wallets",
                    headers=headers,
                    timeout=10
                )
                
                if wallet_response.status_code in [200, 201]:
                    wallet = wallet_response.json()
                    print(f"   ‚úÖ –ö–æ—à–µ–ª–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('username')} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
                else:
                    print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('username')}, –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: {wallet_response.status_code}")
                    if wallet_response.text:
                        try:
                            error_data = wallet_response.json()
                            print(f"      –û—à–∏–±–∫–∞: {error_data}")
                        except:
                            print(f"      –û—Ç–≤–µ—Ç: {wallet_response.text}")
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
            # –ü–æ–ø–æ–ª–Ω—è–µ–º –∫–æ—à–µ–ª–µ–∫ (–Ω–∞—á–∞–ª—å–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞)
            if wallet:
                wallet_id = wallet.get("id")
                initial_balance = random.randint(1000, 5000)
                
                # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø–æ–ø–æ–ª–Ω—è—Ç—å –∫–æ—à–µ–ª—å–∫–∏ —á–µ—Ä–µ–∑ API
                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                admin_user = next((u for u in users if u.get("is_admin", False)), None)
                if not admin_user:
                    print("   ‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫")
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—à–µ–ª–µ–∫ —Å –±–∞–ª–∞–Ω—Å–æ–º 0
                    wallet["user_id"] = user.get("id")
                    wallet["username"] = user.get("username")
                    wallets.append(wallet)
                    continue
                
                admin_token = admin_user.get("token")
                if not admin_token:
                    print("   ‚ö†Ô∏è –¢–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫")
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—à–µ–ª–µ–∫ —Å –±–∞–ª–∞–Ω—Å–æ–º 0
                    wallet["user_id"] = user.get("id")
                    wallet["username"] = user.get("username")
                    wallets.append(wallet)
                    continue
                
                # –ü–æ–ø–æ–ª–Ω—è–µ–º –∫–æ—à–µ–ª–µ–∫ —á–µ—Ä–µ–∑ API —Å —Ç–æ–∫–µ–Ω–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                deposit_data = {
                    "amount": initial_balance,
                    "description": "Initial balance"
                }
                
                deposit_response = requests.post(
                    f"{PAYMENT_SERVICE_URL}/wallets/{wallet_id}/deposit",
                    json=deposit_data,
                    headers={"Authorization": f"Bearer {admin_token}"},
                    timeout=10
                )
                
                if deposit_response.status_code in [200, 201]:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞ –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
                    updated_wallet = deposit_response.json()
                    updated_wallet["user_id"] = user.get("id")
                    updated_wallet["username"] = user.get("username")
                    wallets.append(updated_wallet)
                    print(f"   üí∞ –ö–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('username')} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {initial_balance}")
                else:
                    print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('username')}, –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: {deposit_response.status_code}")
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—à–µ–ª–µ–∫ —Å –±–∞–ª–∞–Ω—Å–æ–º 0
                    wallet["user_id"] = user.get("id")
                    wallet["username"] = user.get("username")
                    wallets.append(wallet)
        except requests.RequestException as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('username')}: {e}")
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ {len(wallets)} –∫–æ—à–µ–ª—å–∫–æ–≤")
    return wallets

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
def create_sales(users, listings, wallets):
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ API
    
    Args:
        users: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        listings: –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        wallets: –°–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤
    
    Returns:
        list: –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂
    """
    sales = []
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –≤—ã—Ö–æ–¥–∏–º
    if not users or not listings:
        print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥–∞–∂")
        return sales
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Ç–æ–∫–µ–Ω—ã
    valid_users = [user for user in users if user.get("token")]
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ (–Ω–µ –±–æ–ª–µ–µ 30% –æ—Ç –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π)
    num_sales = min(int(len(listings) * 0.3), len(listings))
    if num_sales == 0:
        print("‚ö†Ô∏è –ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥–∞–∂")
        return sales
    
    sale_listings = random.sample(listings, num_sales)
    
    print(f"üîÑ –°–æ–∑–¥–∞–Ω–∏–µ {num_sales} –ø—Ä–æ–¥–∞–∂ –∏–∑ —Å–ª—É—á–∞–π–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    
    for listing in sale_listings:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü–∞
        seller_id = listing.get("seller", {}).get("id")
        if not seller_id:
            print(f"   ‚ö†Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ {listing.get('id')} –Ω–µ –∏–º–µ–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–≤—Ü–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            continue
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
        potential_buyers = [user for user in valid_users if user.get("id") != seller_id]
        if not potential_buyers:
            print(f"   ‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è {listing.get('id')}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            continue
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        buyer = random.choice(potential_buyers)
        buyer_token = buyer.get("token")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—à–µ–ª–µ–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        buyer_wallet = next((w for w in wallets if w.get("user_id") == buyer.get("id")), None)
        if not buyer_wallet:
            print(f"   ‚ö†Ô∏è –£ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è {buyer.get('username')} –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
        listing_price = listing.get("price", 0)
        buyer_balance = buyer_wallet.get("balance", 0)
        
        if buyer_balance < listing_price:
            print(f"   ‚ö†Ô∏è –£ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è {buyer.get('username')} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {listing.get('id')}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            continue
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥–∞–∂—É —á–µ—Ä–µ–∑ API
        try:
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏
            sale_data = {
                "listing_id": listing.get("id"),
                "quantity": 1
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏
            headers = {"Authorization": f"Bearer {buyer_token}"}
            
            sale_response = requests.post(
                f"{PAYMENT_SERVICE_URL}/sales",
                json=sale_data,
                headers=headers,
                timeout=10
            )
            
            if sale_response.status_code in [200, 201]:
                sale = sale_response.json()
                
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–ø–ª–∞—Ç—É –ø—Ä–æ–¥–∞–∂–∏
                payment_response = requests.post(
                    f"{PAYMENT_SERVICE_URL}/sales/{sale.get('id')}/pay",
                    headers=headers,
                    timeout=10
                )
                
                if payment_response.status_code in [200, 201]:
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                    paid_sale = payment_response.json()
                    paid_sale["buyer"] = {
                        "id": buyer.get("id"),
                        "username": buyer.get("username")
                    }
                    paid_sale["seller"] = {
                        "id": seller_id,
                        "username": listing.get("seller", {}).get("username")
                    }
                    paid_sale["listing"] = {
                        "id": listing.get("id"),
                        "title": listing.get("title")
                    }
                    
                    sales.append(paid_sale)
                    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∏ –æ–ø–ª–∞—á–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∞ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è '{listing.get('title')}', –ø–æ–∫—É–ø–∞—Ç–µ–ª—å: {buyer.get('username')}")
                else:
                    print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø–ª–∞—Ç–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è {listing.get('id')}, –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: {payment_response.status_code}")
                    if payment_response.text:
                        try:
                            error_data = payment_response.json()
                            print(f"      –û—à–∏–±–∫–∞: {error_data}")
                        except:
                            print(f"      –û—Ç–≤–µ—Ç: {payment_response.text}")
            else:
                print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥–∞–∂—É –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è {listing.get('id')}, –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: {sale_response.status_code}")
                if sale_response.text:
                    try:
                        error_data = sale_response.json()
                        print(f"      –û—à–∏–±–∫–∞: {error_data}")
                    except:
                        print(f"      –û—Ç–≤–µ—Ç: {sale_response.text}")
        except requests.RequestException as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è {listing.get('id')}: {e}")
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(sales)} –ø—Ä–æ–¥–∞–∂")
    return sales

# –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
def export_payment_data(wallets, sales):
    """
    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–æ–≤ –∏ –ø—Ä–æ–¥–∞–∂ –≤ JSON-—Ñ–∞–π–ª
    
    Args:
        wallets: –°–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤
        sales: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–∂
    """
    try:
        data = {
            "wallets": wallets,
            "sales": sales
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON-—Ñ–∞–π–ª
        with open(DATA_FILE, 'w') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {DATA_FILE}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞: {e}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def run_payment_emulator():
    """
    –≠–º—É–ª–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ API payment-svc
    """
    print("üîÑ –ù–∞—á–∞–ª–æ —ç–º—É–ª—è—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API payment-svc...")
    
    prepare_export_dir()
    
    if not check_service():
        print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, —Å–µ—Ä–≤–∏—Å payment-svc –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    existing_data = check_existing_data()
    if existing_data and "wallets" in existing_data and "sales" in existing_data:
        print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞")
        return True
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    users = load_user_data()
    if not users:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤ –∏ –ø—Ä–æ–¥–∞–∂")
        return False
    
    listings = load_listing_data()
    if not listings:
        print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥–∞–∂. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Å –∫–æ—à–µ–ª—å–∫–∞–º–∏.")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ—à–µ–ª—å–∫–∏
    wallets = create_wallets(users)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥–∞–∂–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    sales = []
    if listings:
        sales = create_sales(users, listings, wallets)
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    export_payment_data(wallets, sales)
    
    print("‚úÖ –≠–º—É–ª—è—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API payment-svc —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    return True

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if __name__ == "__main__":
    success = asyncio.run(run_payment_emulator())
    sys.exit(0 if success else 1) 