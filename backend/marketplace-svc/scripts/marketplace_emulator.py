#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API marketplace-svc –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
—á–µ—Ä–µ–∑ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã API –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î
"""

import os
import sys
import json
import asyncio
import random
import requests
from datetime import datetime, timedelta
import uuid

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# MARKETPLACE_SERVICE_URL = "http://localhost/api/marketplace"  # URL –∫ API marketplace-svc
MARKETPLACE_SERVICE_URL = "http://marketplace-svc:8000"  # URL –∫ API marketplace-svc –≤–Ω—É—Ç—Ä–∏ Docker-—Å–µ—Ç–∏
DATA_DIR = "scripts/seed/data"
AUTH_DATA_FILE = os.path.join(DATA_DIR, "auth_seed_data.json")
DATA_FILE = os.path.join(DATA_DIR, "marketplace_seed_data.json")

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–≥—Ä –∏ —Ç–æ–≤–∞—Ä–æ–≤
GAME_CATEGORIES = [
    "RPG", "MMORPG", "FPS", "Strategy", "Simulation", "Sports", 
    "Adventure", "Action", "Racing", "Puzzle", "Platformer", "Fighting"
]

ITEM_TYPES = [
    "Game Account", "In-Game Currency", "Items & Skins", "Game Key", 
    "Power Leveling", "Boosting", "Coaching"
]

GAMES = [
    {
        "name": "World of Warcraft",
        "item_names": ["Epic Mount", "Legendary Weapon", "Rare Pet", "Gold", "Epic Account", "Raid Boost", "PvP Boost"]
    },
    {
        "name": "Counter-Strike 2",
        "item_names": ["Knife Skin", "Glove Skin", "AWP Skin", "AK-47 Skin", "Rank Boost", "Tournament Account", "FACEIT Level 10"]
    },
    {
        "name": "Dota 2",
        "item_names": ["Arcana Set", "Immortal Item", "Courier", "MMR Boost", "Battle Pass Levels", "Tournament Account", "Coaching Session"]
    },
    {
        "name": "League of Legends",
        "item_names": ["Champion Skin", "Rare Account", "Ranked Boost", "Coaching Session", "Riot Points", "Tournament Rewards", "Seasonal Boost"]
    },
    {
        "name": "Fortnite",
        "item_names": ["Rare Skin", "Battle Pass", "V-Bucks", "Account With Exclusives", "Tournament Ready Account", "Competitive Coaching", "Arena Points Boost"]
    },
    {
        "name": "Minecraft",
        "item_names": ["Modded Account", "Rare Username", "Server Access", "Resource Pack", "Marketplace Content", "Custom Build", "Coaching Session"]
    },
    {
        "name": "Apex Legends",
        "item_names": ["Heirloom Account", "Legend Tokens", "Apex Coins", "Ranked Boost", "Badges Boost", "Tournament Account", "Coaching Session"]
    },
    {
        "name": "Genshin Impact",
        "item_names": ["5-Star Character Account", "Primogems", "Artifacts", "Weapons", "Adventure Rank Boost", "Abyss Completion", "Story Quest Help"]
    },
    {
        "name": "Roblox",
        "item_names": ["Rare Limited Item", "Robux", "Premium Account", "Rare Username", "Game Development", "Coaching", "Custom Avatar"]
    },
    {
        "name": "Valorant",
        "item_names": ["Skin Collection", "Ranked Account", "Radianite Points", "Rank Boost", "Tournament Account", "Coaching Session", "Agent Unlock"]
    }
]

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
def prepare_export_dir():
    """
    –°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
    """
    os.makedirs(DATA_DIR, exist_ok=True)
    print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {DATA_DIR} —Å–æ–∑–¥–∞–Ω–∞/—Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω
def check_service():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Å–µ—Ä–≤–∏—Å marketplace-svc
    """
    try:
        response = requests.get(f"{MARKETPLACE_SERVICE_URL}/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ –°–µ—Ä–≤–∏—Å marketplace-svc –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            print(f"‚ùå –°–µ—Ä–≤–∏—Å marketplace-svc –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            return False
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞ marketplace-svc: {e}")
        return False

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
def load_user_data():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
    
    Returns:
        list: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    try:
        with open(AUTH_DATA_FILE, 'r') as f:
            data = json.load(f)
            if "users" in data and len(data["users"]) > 0:
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data['users'])} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ {AUTH_DATA_FILE}")
                return data["users"]
            else:
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª–µ")
                return []
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {AUTH_DATA_FILE}")
        return []
    except json.JSONDecodeError:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON –∏–∑ —Ñ–∞–π–ª–∞: {AUTH_DATA_FILE}")
        return []

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
def check_existing_listings():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ
    
    Returns:
        list: –°–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    """
    try:
        with open(DATA_FILE, 'r') as f:
            data = json.load(f)
            if "listings" in data and len(data["listings"]) > 0:
                print(f"‚ö†Ô∏è –£–∂–µ –µ—Å—Ç—å {len(data['listings'])} —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö.")
                return data["listings"]
            else:
                return []
    except FileNotFoundError:
        return []  # –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    except json.JSONDecodeError:
        return []  # –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ API
def create_listings(users):
    """
    –°–æ–∑–¥–∞–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ API –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        users: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    Returns:
        list: –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    existing_listings = check_existing_listings()
    if existing_listings:
        return existing_listings
    
    all_listings = []
    
    # –ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    for user in users:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if user.get("is_admin", False):
            continue
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        token = user.get("token")
        if not token:
            print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.get('username')} –Ω–µ –∏–º–µ–µ—Ç —Ç–æ–∫–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            continue
            
        # –°–æ–∑–¥–∞–µ–º –æ—Ç 1 –¥–æ 5 –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        num_listings = random.randint(1, 5)
        print(f"üîÑ –°–æ–∑–¥–∞–Ω–∏–µ {num_listings} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('username')}")
        
        for _ in range(num_listings):
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∏–≥—Ä—É
            game = random.choice(GAMES)
            game_name = game["name"]
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
            item_type = random.choice(ITEM_TYPES)
            item_name = random.choice(game["item_names"])
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–µ–Ω—É
            price = random.randint(5, 1000)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            title = f"{item_name} - {game_name}"
            description = f"""–ü—Ä–æ–¥–∞–µ—Ç—Å—è {item_name} –¥–ª—è –∏–≥—Ä—ã {game_name}.
            
–¢–æ–≤–∞—Ä –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞: {item_type}
            
–≠—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ {user.get('username')}. 
–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–¥–µ–ª–∫–∞ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π GameTrade!

–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
- –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
- –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞
- 100% –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
            
–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏ –≤–Ω—É—Ç—Ä–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏.
            """
            
            # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–≥—Ä—ã)
            category = random.choice(GAME_CATEGORIES)
            
            # –§–æ—Ç–æ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è (—Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
            photos = [
                f"https://picsum.photos/id/{random.randint(1, 200)}/300/200",
                f"https://picsum.photos/id/{random.randint(201, 400)}/300/200"
            ]
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            listing_data = {
                "title": title,
                "description": description,
                "price": price,
                "category": category,
                "game": game_name,
                "item_type": item_type,
                "photos": photos,
                "quantity": random.randint(1, 10),
                "condition": random.choice(["New", "Used", "Digital"])
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            try:
                headers = {"Authorization": f"Bearer {token}"}
                
                response = requests.post(
                    f"{MARKETPLACE_SERVICE_URL}/listings",
                    json=listing_data,
                    headers=headers,
                    timeout=10
                )
                
                if response.status_code in [200, 201]:
                    listing_data = response.json()
                    listing_id = listing_data.get("id")
                    
                    # –ï—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ—Ä–æ–∂–µ 500, –¥–µ–ª–∞–µ–º –µ–≥–æ –ø—Ä–µ–º–∏—É–º (–¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö)
                    if price > 500 and random.random() < 0.3:
                        promote_data = {"featured": True}
                        promote_response = requests.patch(
                            f"{MARKETPLACE_SERVICE_URL}/listings/{listing_id}/promote",
                            json=promote_data,
                            headers=headers,
                            timeout=10
                        )
                        
                        if promote_response.status_code == 200:
                            listing_data["featured"] = True
                            print(f"   ‚≠ê –û–±—ä—è–≤–ª–µ–Ω–∏–µ '{title}' –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–µ–º–∏—É–º")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                    listing_data["seller"] = {
                        "id": user.get("id"),
                        "username": user.get("username"),
                        "email": user.get("email")
                    }
                    
                    all_listings.append(listing_data)
                    print(f"   ‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ '{title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ")
                else:
                    print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ '{title}', –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
                    if response.text:
                        try:
                            error_data = response.json()
                            print(f"      –û—à–∏–±–∫–∞: {error_data}")
                        except:
                            print(f"      –û—Ç–≤–µ—Ç: {response.text}")
            except requests.RequestException as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è '{title}': {e}")
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(all_listings)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    return all_listings

# –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
def export_listing_data(listings):
    """
    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ JSON-—Ñ–∞–π–ª
    
    Args:
        listings: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    """
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON-—Ñ–∞–π–ª
        with open(DATA_FILE, 'w') as f:
            json.dump({"listings": listings}, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {DATA_FILE}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {e}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def run_marketplace_emulator():
    """
    –≠–º—É–ª–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ API marketplace-svc
    """
    print("üîÑ –ù–∞—á–∞–ª–æ —ç–º—É–ª—è—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API marketplace-svc...")
    
    prepare_export_dir()
    
    if not check_service():
        print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, —Å–µ—Ä–≤–∏—Å marketplace-svc –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False
    
    users = load_user_data()
    if not users:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        return False
    
    listings = create_listings(users)
    export_listing_data(listings)
    
    print("‚úÖ –≠–º—É–ª—è—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API marketplace-svc —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    return True

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if __name__ == "__main__":
    success = asyncio.run(run_marketplace_emulator())
    sys.exit(0 if success else 1) 