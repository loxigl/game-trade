#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API auth-svc –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
—á–µ—Ä–µ–∑ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î
"""

import os
import sys
import json
import asyncio
import random
import requests
from datetime import datetime, timedelta
import uuid

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# AUTH_SERVICE_URL = "http://localhost/api/auth"  # URL –∫ API auth-svc
AUTH_SERVICE_URL = "http://auth-svc:8000"  # URL –∫ API auth-svc –≤–Ω—É—Ç—Ä–∏ Docker-—Å–µ—Ç–∏
DATA_DIR = "scripts/seed/data"
DATA_FILE = os.path.join(DATA_DIR, "auth_seed_data.json")

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_DATA = [
    {
        "email": "admin@gametrade.com",
        "username": "admin",
        "password": "admin123",
        "is_admin": True,
        "bio": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã GameTrade",
        "avatar": "https://randomuser.me/api/portraits/men/0.jpg"
    },
    {
        "email": "alice@example.com",
        "username": "alice",
        "password": "password123",
        "is_admin": False,
        "bio": "–û–ø—ã—Ç–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∏–≥—Ä",
        "avatar": "https://randomuser.me/api/portraits/women/1.jpg"
    },
    {
        "email": "bob@example.com",
        "username": "bob",
        "password": "password123",
        "is_admin": False,
        "bio": "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä —Ä–µ–¥–∫–∏—Ö –≤–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤",
        "avatar": "https://randomuser.me/api/portraits/men/2.jpg"
    },
    {
        "email": "charlie@example.com",
        "username": "charlie",
        "password": "password123",
        "is_admin": False,
        "bio": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–µ–π–º–µ—Ä –∏ –ø—Ä–æ–¥–∞–≤–µ—Ü –∞–∫–∫–∞—É–Ω—Ç–æ–≤",
        "avatar": "https://randomuser.me/api/portraits/men/3.jpg"
    },
    {
        "email": "diana@example.com", 
        "username": "diana",
        "password": "password123",
        "is_admin": False,
        "bio": "–°—Ç—Ä–∏–º–µ—Ä –∏ –ø—Ä–æ–¥–∞–≤–µ—Ü –≤–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤–æ–π –≤–∞–ª—é—Ç—ã",
        "avatar": "https://randomuser.me/api/portraits/women/4.jpg"
    },
    {
        "email": "evan@example.com",
        "username": "evan",
        "password": "password123",
        "is_admin": False,
        "bio": "–ù–æ–≤–∏—á–æ–∫ –≤ –º–∏—Ä–µ —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏–≥—Ä–æ–≤—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏",
        "avatar": "https://randomuser.me/api/portraits/men/5.jpg"
    },
    {
        "email": "fiona@example.com",
        "username": "fiona",
        "password": "password123",
        "is_admin": False,
        "bio": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ä–µ–¥–∫–∏–º –ø—Ä–µ–¥–º–µ—Ç–∞–º World of Warcraft",
        "avatar": "https://randomuser.me/api/portraits/women/6.jpg"
    },
    {
        "email": "george@example.com",
        "username": "george",
        "password": "password123",
        "is_admin": False,
        "bio": "–ü—Ä–æ–¥–∞—é —Å–∫–∏–Ω—ã –¥–ª—è CS:GO –∏ Dota 2",
        "avatar": "https://randomuser.me/api/portraits/men/7.jpg"
    },
    {
        "email": "hannah@example.com",
        "username": "hannah",
        "password": "password123",
        "is_admin": False,
        "bio": "–•—É–¥–æ–∂–Ω–∏–∫, —Å–æ–∑–¥–∞—é –∏ –ø—Ä–æ–¥–∞—é –º–æ–¥—ã –¥–ª—è –∏–≥—Ä",
        "avatar": "https://randomuser.me/api/portraits/women/8.jpg"
    },
    {
        "email": "ivan@example.com",
        "username": "ivan",
        "password": "password123",
        "is_admin": False,
        "bio": "–ü–æ–∫—É–ø–∞—é –∏ –ø—Ä–æ–¥–∞—é –∞–∫–∫–∞—É–Ω—Ç—ã —Å —Ä–µ–¥–∫–∏–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏",
        "avatar": "https://randomuser.me/api/portraits/men/9.jpg"
    }
]

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
def prepare_export_dir():
    """
    –°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
    """
    os.makedirs(DATA_DIR, exist_ok=True)
    print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {DATA_DIR} —Å–æ–∑–¥–∞–Ω–∞/—Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω
def check_service():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Å–µ—Ä–≤–∏—Å auth-svc
    """
    try:
        response = requests.get(f"{AUTH_SERVICE_URL}/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ –°–µ—Ä–≤–∏—Å auth-svc –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            print(f"‚ùå –°–µ—Ä–≤–∏—Å auth-svc –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            return False
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞ auth-svc: {e}")
        return False

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ API
def register_users():
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ —ç–Ω–¥–ø–æ–∏–Ω—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    
    Returns:
        list: –°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
    """
    registered_users = []
    admin_token = None
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    try:
        with open(DATA_FILE, 'r') as f:
            data = json.load(f)
            if data and "users" in data and len(data["users"]) > 0:
                print(f"‚ö†Ô∏è –£–∂–µ –µ—Å—Ç—å {len(data['users'])} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö.")
                return data["users"]
    except FileNotFoundError:
        pass  # –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    
    for user_data in USER_DATA:
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        register_data = {
            "email": user_data["email"],
            "username": user_data["username"],
            "password": user_data["password"]
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        try:
            print(f"üîÑ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data['username']}")
            response = requests.post(
                f"{AUTH_SERVICE_URL}/register", 
                json=register_data,
                timeout=10
            )
            
            if response.status_code == 201:
                user_id = response.json().get("user_id")
                
                # –õ–æ–≥–∏–Ω–∏–º—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
                login_data = {
                    "username": user_data["email"],  # –û–±—ã—á–Ω–æ –≤—Ö–æ–¥ –ø–æ email
                    "password": user_data["password"]
                }
                
                login_response = requests.post(
                    f"{AUTH_SERVICE_URL}/login", 
                    json=login_data,
                    timeout=10
                )
                
                if login_response.status_code == 200:
                    access_token = login_response.json().get("access_token")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                    if user_data["is_admin"] and admin_token is None:
                        admin_token = access_token
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    headers = {"Authorization": f"Bearer {access_token}"}
                    profile_response = requests.get(
                        f"{AUTH_SERVICE_URL}/me", 
                        headers=headers,
                        timeout=10
                    )
                    
                    if profile_response.status_code == 200:
                        profile_data = profile_response.json()
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        update_data = {
                            "bio": user_data["bio"],
                            "avatar_url": user_data["avatar"]
                        }
                        
                        update_response = requests.patch(
                            f"{AUTH_SERVICE_URL}/account/profile", 
                            json=update_data,
                            headers=headers,
                            timeout=10
                        )
                        
                        if update_response.status_code == 200:
                            # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω, –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                            if user_data["is_admin"] and admin_token:
                                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π
                                roles_response = requests.get(
                                    f"{AUTH_SERVICE_URL}/roles",
                                    headers={"Authorization": f"Bearer {admin_token}"},
                                    timeout=10
                                )
                                
                                if roles_response.status_code == 200:
                                    roles = roles_response.json()
                                    admin_role_id = None
                                    
                                    # –ò—â–µ–º —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                                    for role in roles:
                                        if role.get("name").lower() == "admin":
                                            admin_role_id = role.get("id")
                                            break
                                    
                                    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞, –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                                    if admin_role_id:
                                        role_assign_response = requests.post(
                                            f"{AUTH_SERVICE_URL}/users/{user_id}/roles/{admin_role_id}",
                                            headers={"Authorization": f"Bearer {admin_token}"},
                                            timeout=10
                                        )
                                        
                                        if role_assign_response.status_code not in [200, 201]:
                                            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–≤–æ–∏—Ç—å —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_data['username']}")
                            
                            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                            export_data = {
                                "id": profile_data.get("id"),
                                "email": user_data["email"],
                                "username": user_data["username"],
                                "is_verified": True,
                                "is_admin": user_data["is_admin"],
                                "created_at": datetime.now().isoformat(),
                                "profile": {
                                    "id": profile_data.get("profile", {}).get("id"),
                                    "avatar_url": user_data["avatar"],
                                    "bio": user_data["bio"]
                                },
                                "token": access_token
                            }
                            
                            registered_users.append(export_data)
                            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['username']} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                        else:
                            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['username']}")
                    else:
                        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['username']}")
                else:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_data['username']}")
            else:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['username']}, –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
                if response.text:
                    try:
                        error_data = response.json()
                        print(f"   –û—à–∏–±–∫–∞: {error_data}")
                    except:
                        print(f"   –û—Ç–≤–µ—Ç: {response.text}")
        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['username']}: {e}")
    
    print(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(registered_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    return registered_users

# –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
def export_user_data(users):
    """
    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ JSON-—Ñ–∞–π–ª
    
    Args:
        users: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    """
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON-—Ñ–∞–π–ª
        with open(DATA_FILE, 'w') as f:
            json.dump({"users": users}, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {DATA_FILE}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è 
async def run_auth_emulator():
    """
    –≠–º—É–ª–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ API auth-svc
    """
    print("üîÑ –ù–∞—á–∞–ª–æ —ç–º—É–ª—è—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API auth-svc...")
    
    prepare_export_dir()
    
    if not check_service():
        print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, —Å–µ—Ä–≤–∏—Å auth-svc –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False
    
    users = register_users()
    export_user_data(users)
    
    print("‚úÖ –≠–º—É–ª—è—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API auth-svc —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    return True

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if __name__ == "__main__":
    success = asyncio.run(run_auth_emulator())
    sys.exit(0 if success else 1) 